Linux cmds (Necessary before understanding Git commands):

1. "cat <filename>"
ex: cat notes.txt
it displays the content inside notes.txt

2. "ls"
It lists files and directories in the current directory.

3. "cd .."
Moves up one directory level (to the parent directory)
ex: if you're in /home/user/Desktop
    cd ..
    takes you to /home/user

4. "ls -a"
Lists all files, including hidden files (those starting with a dot (.)).
ex: ls -a
    will show files like:
    .     ..     .bashrc     .gitignore     myfile.txt     .git

___________________________________________________________________________

git - saves changes/history of code or project
useful when many developers are working on same project
it tracks the changes, bugs, and saves every version of code as a new file.

useful to resolve bugs and mantaining history of code

git was founded by linus torwards
git had so many contributors, so it do not outdated like others

How to use git?

to start tracking a folder =
use git init
(iss folder ko track karna chalu karo)
it initialize the git in our folder

to start tracking a file inside a folder =
use git add <filename>
(git bhai iss file ko version control karo)

in reality there will be many files
so for all files, git add command won't be efficient!

for that use this cmd = 
git add .
this command starts tracking all the files

u - Untracked
A - Index added (it means a particular file is add into git index)
M - Modified

In .git folder, in index folder, git stores the info of the files to track
Untracked files will not be displayed in "cat index" command

git status
this cmd will display the currently tracking files in simple ui instead of checking it from "cd .git cat index" cmd

all the git commands perform read and write operations on the files inside .git folder
so, the tracking of the all files will be on local computer (inside local .git folder)

so, tracking happens inside our project / project folder

if we transfer the corresponding project folder through pendrive or any other way, the .git folder (which contains all the changes) will also get trsnsferred with it.

if we type "git status", it will show us the files which are not committed, which are currently in staging phase.

when we start tracking any files, first it will go to staging area by using "git add ."

git commit
this cmd will save your changes to the local Git repository. It creates a snapshot of your project's current state so you can track versions over time.

Usage:
git commit -m "Message to send when committing"

ex:
git commit -m "Add login form validation"

This records the changes you've staged (with git add) and attaches the message "Add login form validation" to that snapshot.

commit is a checkpoint(snapshot)
when we commit, it becomes a checkpoint

Every commit has it's own id - hash
how to see that commit id?

git log
It shows the history of the commits you've made in your git repository
it tells:
- who made the commits?
- what is the commit id?
- when the commits are made
- what was the commit message?

git diff:
The git diff command shows the exact line-by-line changes made in your code that have not been committed yet. It helps you see what's changed before committing or after pulling.

git cat-file -p <commit id (hash)>
shows the message of commit

git cat-file -s <commit id(hash)>
shows the size of a commit

git cat-file -t <commit id(hash)>
shows the type of the action (e.g. commit)

git is case sensitive
when we try to read file inside .git folder, it will show us the not readable text format which is due to compressed files

when we use "git cat-file -p <commit id (hash)>" command, it will first decompress the file and then it'll print the results.

git init                 --|
git add .                --|----------- 98% of the time we will be using this commands
git commit -m "Message"  --|

git log     --|
              |---0.5% of the time we will be using this commands
git status  --|

how the git commit's hash (Id) is made ?
first read all the code files in folder and HASH it using SHA1 algorithm
whatever HASH comes is your commit HASH

when we add and commit without any changes, it calculates the HASH in both cases, and both hashes will be same, so it will display "nothing to commit, working tree clean"

hash makes the unique identifier of each commit

we never interact with hashes
we never make changes inside .git folder
we always use git cli

these are the prerequisites to understand how git stores and retrive different versions of code

can we go up and down in commits?
can we revert back and forward the HEAD in commits?
- Yes
but, how?

git reset <commit id(hash)>
to whichever commit yo want to go, just type it's hash after "git reset"
though, here we can go in forward or backward commits.

to delete / discard any specific commit
use:
git reset --hard <commit id(hash)>
just add "--hard" after "git reset" and type commit's hash to delete it.
here, we cannot go in forward or backward commits, because it's deleted,for that we could use "git reset" command instead of using "git reset --hard"

where the .git folder lies?
- in our local machine

now suppose you want to do a project with your friend and want to share the code with him/her
how to share ?
using google drive, pendrive

suppose you both are using pendrive for sharing the files
you copy the project folder to the pendrive
so the .git folder will also go with the project in pendrive

now your friend will get this pendrive
he/she will copy the code files
so there will also be .git folder

if your friend types "git log" in your project folder, he/she can see all the changes/commits/history you've made because all the commits resides inside .git folder

now your friend made some changes in this project folder
he/she made a commit with all these changes and copied the project folder to the pendrive

now your friend calls you and tells you  "I've made some changes inside the project folder, you can get it"

now you copy the files to your computer
now you ca also see your friend's changes inside project folder

this is how git makes the collaboration possible between 2 or may peoples.

but there is one problem
- can we consider pendrive as a central storage system
  - no

consider both the persons have made the changes to the same file (e.g. hello.txt)
now who will be considered as source of truth?
we should have a central place which acts as a source of truth
in addition, we should also have such device connected with internet, so both persons can work remotely.

For that we use GitHub instead of pendrive.
So, in github there will be a central repository, where both persons can independently pull or push the code without any conflict

How to upload files on github using git:
first create a repo on github then copy the "git remote add origin" command
Ex:
git remote add origin https://github.com/dharmikbhuva2784/Git_GitHub_Concepts.git
git push -u origin main

this will push your whole code to github repo

Assignment:
- there is a company named ChaiCohort
- this company needs to prepare an onboarding documentation
- when an employee or an intern joins the company, he/she is given a guide to how to maintain a git
- task: create a repo named "ChaiCohort" and add file with content:
    - basic git commands
    - whole git summary, git folder architecture
    - precautions during collaboration
    - rule for commit
        (e.g. msg should be proper for commit)
        (e.g. if solving a ticket, then message should be ticket id)

___________________________________________________________________________

Git branching:
we can make multiple branches in git and in every branch, every developer can code independently from others.

by default, there is a branch called "main" in git
in early days, it was used to be called as "master" branch.

suppose there are 4 commit in main branch, your friend wants to work on a feature of the project

suppose client requested 2 features
- Feature A
- Feature B

you choose to work on "Feature B", your friend choose to work on "Feature A"
to do this in git, we can pull out new branches from the "main" branch

you can pull out your new branch named "feat/b" and commit independently from your friend
your friend can also pull out a new branch named "feat/a" to work on that particular feature independently from you.

suppose your friend completed "Feature A" work in 3 commits, now he can merge his own commits in a single "main" branch commit

you completed "Feature B" work in 2 commits, now you can merge your own commits in another single "main" branch commit

now suppose if another task "Feature C" comes, so we can create another branch named "feat/c" and perform work independently, after completion, we can merge the work again into a "main" branch commit

This is how teams work in collaboration.

In any development company organization, there is a "main" branch (name can vary in every company)